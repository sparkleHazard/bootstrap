name: CI, Build, Release, and Docs

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # Trigger on version tags, e.g. v1.0.0
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds.
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: linux
            arch: armv7l
          # Darwin builds.
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.5

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          # For Linux armv7l, map to GOARCH=arm and set GOARM=7; for other architectures, use the matrix value.
          GOARCH: ${{ contains(matrix.arch, 'armv7l') && 'arm' || matrix.arch }}
          GOARM: ${{ contains(matrix.arch, 'armv7l') && '7' || '' }}
        run: |
          mkdir -p artifacts
          output="bootstrap-${{ matrix.os }}-${{ matrix.arch }}"
          echo "Building for OS: $GOOS, ARCH: $GOARCH, GOARM: $GOARM"
          go build -o $output .
          ls -l $output

      - name: Run tests
        run: go test ./...

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: bootstrap-${{ matrix.os }}-${{ matrix.arch }}
          path: bootstrap-${{ matrix.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          allowUpdates: "true"

      - name: Upload Release Assets using GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $(find ./artifacts -type f); do
            ls -la $file
            echo "Uploading asset: $file"
          gh release upload "${{ github.ref_name }}" "$file" --clobber
          done

  update-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate available roles documentation
        run: |
          # Query the GitHub API for the contents of the 'roles' directory in the ansible repo.
          curl -sSL "https://api.github.com/repos/sparkleHazard/ansible/contents/roles" | jq -r '.[].name' | sort > ROLES.md

      - name: Commit and push updated ROLES.md
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          if [ -n "$(git status --porcelain ROLES.md)" ]; then
            git add ROLES.md
            git commit -m "Update available roles documentation"
            git push
          else
            echo "ROLES.md is up-to-date."
          fi
